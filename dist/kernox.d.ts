// Generated by dts-bundle v0.7.3

export class Kernox {
    execute(): void;
    use(addon: KernoAddon): void;
    get entityFactory(): EntityFactory;
    get collectionManager(): CollectionManager;
    get systemManager(): SystemManager;
    get eventBroker(): EventBroker;
    get addonLoader(): AddonLoader;
    get frame(): number;
}

export class AddonLoader {
    constructor(__kernox: Kernox);
    use(addon: KernoAddon): void;
    get namespaces(): Set<string>;
}

export interface KernoAddon {
    name: string;
    prototypes?: PrototypeSchema<any>[];
    collections?: (new (...args: any[]) => AbstractCollection)[];
    systems?: (new (...args: any[]) => System)[];
    listeners?: {
        [eventName: string]: (new (...args: any[]) => System);
    };
    dependancies?: KernoAddon[];
}

export class CollectionManager {
    constructor(__kernox: Kernox);
    get(collectionName: string): AbstractCollection;
    use(Ctr: new () => AbstractCollection, namespace?: string): void;
    addEntityTo(entity: Entity, collectionName: string): void;
    removeEntityFrom(entity: Entity, collectionName: string): void;
    flushRemoved(): void;
}

export class EntityFactory {
    constructor(__kernox: Kernox);
    prototype(prototype: PrototypeSchema<any>, namespace?: string): void;
    create(type: string, params: object): Entity;
    copyFromPrototype(recipient: Entity, prototype: PrototypeSchema<any>): void;
    sendToRest(entity: Entity): void;
}

export class EventBroker {
    constructor(__kernox: Kernox);
    dispatch(eventName: string, detail?: any): boolean;
    subscribe(eventName: string, systemName: string, namespace?: string): boolean;
}

export class SystemManager {
    constructor(__kernox: Kernox);
    execute(): void;
    use(Ctor: new (kernox: Kernox) => System, namespace?: string): boolean;
    unuse(systemName: string): void;
    get<T extends System>(systemName: string): T | undefined;
}

export interface PrototypeSchema<TypeSchema> {
    name: string;
    attributes: TypeSchema;
    collections?: Set<string>;
    inherits?: PrototypeSchema<any>[];
}

export abstract class AbstractCollection {
    protected abstract entities: unknown;
    protected abstract __changed: boolean;
    abstract insert(entity: Entity): void;
    abstract remove(entity: Entity): void;
    abstract iterate(callback: Function): void;
}

export class System {
    protected __kernox: Kernox;
    protected paused: boolean;
    constructor(__kernox: Kernox);
    execute(): void;
    get isPaused(): boolean;
    set setPaused(state: boolean);
}

export class Entity {
    constructor(__ID: string, __TYPE: string);
    get id(): string;
    get type(): string;
    belongsTo(collectionName: string): boolean;
    collections(): Set<string>;
    linkTo(collectionName: string): void;
    unlinkFrom(collectionName: string): void;
    appendChild(name: string, child: Entity): void;
    getChild(name: string): Entity | undefined;
    deleteChild(name: string): void;
}

