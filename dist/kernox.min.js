var e={d:(t,s)=>{for(var r in s)e.o(s,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:s[r]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};e.d(t,{w:()=>d,_:()=>u});class s{constructor(e){this.__kernox=e,this.__namespaces=new Set}use(e){const{name:t}=e;if(this.namespaces.has(t))throw new Error(`Conflict with already existing namespace '${t}', please consider renaming one of them.`);e.collections&&this.registerCollections(e.collections,t),e.prototypes&&this.registerPrototypes(e.prototypes,t),e.systems&&this.registerSystems(e.systems,t),e.listeners&&this.registerEventListeners(e.listeners,t),this.namespaces.add(t)}get namespaces(){return this.__namespaces}registerPrototypes(e,t){e.forEach((e=>{this.__kernox.entityFactory.prototype(e,t)}))}registerCollections(e,t){e.forEach((e=>{this.__kernox.collectionManager.use(e,t)}))}registerSystems(e,t){e.forEach((e=>{this.__kernox.systemManager.use(e,t)}))}registerEventListeners(e,t){Object.keys(e).forEach((s=>{e[s].forEach((e=>this.__kernox.eventBroker.subscribe(s,e,t)))}))}}class r{}function o(e,t){let s=e.prototype;for(;s;)if(s=Object.getPrototypeOf(s),s===t.prototype)return!0;return!1}class n{constructor(e){this.__kernox=e,this.collections=new Map,this.toRemove=new Set}get(e){const t=this.collections.get(e)||this.resolveImplicitNamespace(e);if(!t)throw new Error(`Collection '${e}' is not registered.`);return t}use(e,t=""){if(!o(e,r))throw new Error("Invalid collection: it must be a sub-class of AbstractCollection");const s=t?`${t}.${e.name}`:e.name;if(this.collections.has(s))throw new Error(`Cannot register collection '${s}' because it already exists`);const n=new e;this.collections.set(s,n)}addEntityTo(e,t){this.get(t).insert(e),e.linkTo(t)}removeEntityFrom(e,t){this.get(t).remove(e),e.unlinkFrom(t)}remindToForget(e){this.toRemove.add(e)}flushRemoved(){for(const e of this.toRemove)for(const t of e.collections())this.removeEntityFrom(e,t);this.toRemove.clear()}resolveImplicitNamespace(e){const t=this.__kernox.addonLoader.namespaces;var s,r;for(const o of t)if((r=this.collections[`${o}.${e}`])&&!s)s=r;else if(r)throw new Error(`Ambiguous collection '${e}' was requested: a namespace must be specified before it ( Ex. namespace.collectionName ).`);return s}}class i{constructor(e,t){this.__ID=e,this.__TYPE=t,this.__children={},this.__collections=new Set,this.__modified=!1}get id(){return this.__ID}get type(){return this.__TYPE}belongsTo(e){return this.__collections.has(e)}collections(){return this.__collections}linkTo(e){this.__collections.add(e)}unlinkFrom(e){this.__collections.delete(e)}appendChild(e,t){if(this.__children[e])throw Error(`Child already exists with name '${e}' at entity '${this.__ID}'`);this.__children[e]=t}getChild(e){return this.__children[e]}deleteChild(e){delete this.__children[e]}}class a{constructor(e){this.__kernox=e,this.types=new Map,this.pools=new Map,this.nextID=0}prototype(e,t=""){const s=t?`${t}.${e.name}`:e.name;if(this.types.has(s))throw Error(`The type named '${s}' has already been registered`);const{inherits:r}=e;if(r){const t=r,s=[];for(const e of t)s.push(e);let o=s.pop();for(;o;){const t={};this.deepAssign(t,o.attributes),this.deepAssign(t,e.attributes),e.attributes=t,e.collections=new Set([...e.collections||[],...o.collections||[]]);for(const e of o.inherits||[])s.push(e);o=s.pop()}}this.types.set(s,e)}create(e,t){const s=this.types.get(e)||this.resolveImplicitNamespace(e);if(!s)throw Error(`Cannot create entity of null type '${e}'`);const r=new i(""+this.nextID++,e);this.copyFromPrototype(r,s);for(const e of Object.keys(t))e in r&&!e.includes("_")&&(r[e]=t[e]);for(const e of s.collections||[])r.linkTo(e);return r}copyFromPrototype(e,t){this.deepAssign(e,t.attributes)}sendToRest(e){}resolveImplicitNamespace(e){const t=this.__kernox.addonLoader.namespaces;var s,r;for(const o of t)if((r=this.types[`${o}.${e}`])&&!s)s=r;else if(r)throw new Error(`Ambiguous entity type '${e}' was requested: a namespace must be specified before it ( Ex. namespace.type ).`);return s}deepAssign(e,t,s=new WeakMap){if(!s.has(t)){s.set(t,e);for(const r of Object.keys(t)){const o=t[r];null===o||"object"!=typeof o?e[r]=o:Array.isArray(o)?(e[r]=[],this.deepAssign(e[r],o,s)):o.constructor!==Object?(e[r]=new o.constructor,this.deepAssign(e[r],o,s)):(e[r]={},this.deepAssign(e[r],o,s))}}}}class c{constructor(e){this.__kernox=e,this.listeners=new Map}dispatch(e,t){const s=this.listeners[e]||this.resolveImplicitNamespace(e);if(!s)return!1;for(const e of s)e(t);return!0}subscribe(e,t,s=""){const r=this.__kernox.systemManager.get(t);if(!e||"string"!=typeof e)throw new Error("[EventManager] invalid event name provided: it must be a non-empty string");if(!r)throw new Error(`[EventManager] system '${t}' not found.`);const o=e.split(".");2==o.length&&([s,e]=o);const n=`on${e}`,i=(s?s+"_":"")+n,a=s?`${s}.${e}`:e;var c;if(console.log(i,r[i]),n!==i&&"function"==typeof r[i]&&"function"==typeof r[n])throw new Error(`[EventManager] '${t}' has duplicated handler methods for event ${e}'`);if("function"!=typeof r[i]&&"function"!=typeof r[n])throw new Error(`[EventManager] '${t}' does not implement a handler method for event ${e}`);if("function"==typeof r[i])c=i;else{if(this.lookForAmbiguity(e))throw new Error(`[EventManager] '${t}' implements '${n}', which is ambiguous, please implement '${i}' instead.`);c=n}return this.listeners[a]||(this.listeners[a]=new Set),this.listeners[a].add((e=>{r[c]?.(e)})),!0}lookForAmbiguity(e){const t=this.__kernox.addonLoader.namespaces;let s;for(const r of t)if(s=this.listeners[`${r}.${e}`],s)return!0;return!1}resolveImplicitNamespace(e){const t=this.__kernox.addonLoader.namespaces;var s,r;for(const o of t)if((r=this.listeners[`${o}.${e}`])&&!s)s=r;else if(r)throw new Error(`Ambiguous event '${e}' was requested: a namespace must be specified before it ( Ex. namespace.eventName ).`);return s}}class h{constructor(e){this.__kernox=e,this.paused=!1}execute(){}get isPaused(){return this.paused}set setPaused(e){this.paused=e}}class l{constructor(e){this.__kernox=e,this.systems=new Map,this.executionList=[]}execute(){this.executionList.forEach((e=>{e.isPaused||e.execute()}))}use(e,t=""){const s=t?`${t}.${e.name}`:e.name;if(!o(e,h))throw new Error("Expected instance of 'System'");if(this.systems.has(s))return console.warn(`System '${s}' is already registered`),!1;const r=new e(this.__kernox);return this.systems.set(s,r),this.executionList.push(r),!0}unuse(e){const t=this.systems.get(e);t&&(this.systems.delete(e),this.executionList=this.executionList.filter((e=>e!==t)))}get(e){return this.systems.get(e)}}class u extends r{constructor(){super(...arguments),this.entities=new Set,this.__changed=!1}insert(e){this.entities.add(e),e.linkTo(this.constructor.name),this.__changed=!0}remove(e){this.entities.delete(e),e.unlinkFrom(this.constructor.name),this.__changed=!0}has(e){return this.entities.has(e)}iterate(e){this.entities.forEach(e)}filter(e){return Array.from(this.entities).filter(e)}get changed(){return this.__changed}}class d{constructor(){this.__entityFactory=new a(this),this.__collectionManager=new n(this),this.__systemManager=new l(this),this.__eventBroker=new c(this),this.__addonLoader=new s(this),this.frameCount=0,this.paused=!1}execute(){this.paused||(requestAnimationFrame((()=>this.execute())),this.__systemManager.execute(),this.frameCount++)}use(e){this.__addonLoader.use(e)}get entityFactory(){return this.__entityFactory}get collectionManager(){return this.__collectionManager}get systemManager(){return this.__systemManager}get eventBroker(){return this.__eventBroker}get addonLoader(){return this.__addonLoader}get frame(){return this.frameCount}}var p=t.w,m=t._;export{p as Kernox,m as LinearCollection};