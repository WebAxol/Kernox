class AgentPool{#a;#b;#c;constructor(e){this.world=e,this.#a={},this.#b={},this.toBeRemoved=[],this.#c=class e{#d;#e;constructor(e,t){this._children={},this.#e={},this.#d=e,t.info&&Object.keys(t.info).forEach(e=>{let o=t.info[e];"object"==typeof o?this[e]=Object.assign({},o):this[e]=o})}getType(){return this.#d}isInCollection(e){return this.#e[e]}getCollections(){return Object.keys(this.#e)}addCollection(e){this.#e[e]=1}removeCollection(e){delete this.#e[e]}reset(e){Object.keys(e.info).forEach(t=>{let o=e.info[t];"object"==typeof o?this[t]=Object.assign({},o):this[t]=o})}}}registerType(e,t){return"string"!=typeof e||""==e?(throw Error(`Cannot create agentType with a type name defined as: ${e}; the type must be a non-empty string`),!1):void 0!=this.#a[e]?(throw Error(`The type named '${e}' has already been registered`),!1):void 0==t?(throw Error("Prototype cannot be undefined, it must be a JSON with the attributes of the agent"),!1):(this.#a[e]=t,this.#b[e]=[],!0)}createAgent(e,t){var o;return"string"!=typeof e||""==e?(throw Error(`Cannot create agent with a type defined as: ${e}; the type must be a non-empty string`),!1):(console.log(this.#a),this.#a[e])?void 0!=t&&"object"!=typeof t?(throw Error("'details' must be an object"),!1):(this.world,this.#b[e].length>0?(o=this.#b[e].pop(),this.resetAgent(o)):o=new this.#c(e,this.#a[e]),t&&t.info)?(Object.keys(t.info).forEach(e=>{void 0!=t.info[e]&&(o[e]=t.info[e])}),o instanceof this.#c)?o:(throw Error(`Something went wrong when creating a new Agent of type ${e}`),!1):o:(throw Error(`Cannot create agent with a type defined as: ${e}; the type doesn't exist at AgentPool`),!1)}getCollectionsOfType(e){return this.#a[e]?this.#a[e].collections||[]:(console.warn(`Cannot get collections from unexisting type '${typename}'`),!1)}storeToBeRemoved(e){this.toBeRemoved.push(e)}removeAgent(e){try{let t=e.getType();e.getCollections().forEach(t=>{this.world.removeFromCollection(t,e)});let o=Object.keys(e._children);for(;o.length;)this.removeAgent(e._children[o[0]]),delete e._children[o[0]],o.shift();this.#b[t].push(e)}catch(r){return throw Error(`Error, agent ${e}`),!1}}removeAgents(){for(;this.toBeRemoved.length;){let e=this.toBeRemoved.pop();this.removeAgent(e)}}resetAgent(e){let t=this.#a[e.getType()];e.reset(t)}}class CollectionManager{#e;constructor(e){this.world=e,this.#e={},this.toBeRemoved=[],this._objectPool=[]}registerCollection(e){return"string"!=typeof e||""==e?(throw Error(`Cannot register collection with a name defined as: ${typeName}; the name must be a non-empty string`),!1):this.#e[e]?(throw Error(`Collection named '${e}' already registered`),!1):(this.#e[e]=[],this)}getCollection(e){return this.#e[e]?this.#e[e]:(throw Error(`Cannot get unregistered collection '${e}'`),!1)}addToCollection(e,t){return this.#e[e]?"object"==typeof t&&t.isInCollection&&t.addCollection?t.isInCollection||t.isInCollection(e)?(throw Error(`The agent is already registered to collection ${e}`),!1):(this.#e[e].push(t),t.addCollection(e),!0):(throw Error(`The value passed as 'agent' is not a valid Agent object ${e}`),!1):(throw Error(`collection named '${e} is not registered'`),!1)}cacheToBeRemoved(e,t){var o;this._objectPool.length>0?((o=this._objectPool.pop()).collectionName=e,o.agent=t,this.toBeRemoved.push(o)):this.toBeRemoved.push({collectionName:e,agent:t})}removeFromCollection(e,t){let o=this.#e[e].indexOf(t);this.#e[e].splice(o,1),t.removeCollection(e)}removeAgentsFromCollections(){for(;this.toBeRemoved.length>0;){let e=this.toBeRemoved.pop();this.removeFromCollection(e.collectionName,e.agent),e.collectionName=void 0,e.agent=void 0,this._objectPool.push(e)}}}class EventManager{constructor(e){this.world=e,this.events={}}registerEvent(e){if(this.events[e])return console.warn(`Event named '${e} has already been registered'`),!1;this.events[e]={}}registerServiceToEvent(e,t){if(!this.events[t])return console.warn(`Cannot register service '${e}' to unregistered event '${t}'`),!1;var o=this.world.getService(e);return o?"function"!=typeof o[`on${t}`]?(console.warn(`Cannot register service '${e}' to event, because the service does not have a method 'on${t}'`),!1):void(this.events[t][e]=o):(console.warn(`Cannot register service '${e}' to event, because the service is not registered to the framework`),!1)}notifyToServices(e,t){if(!this.events[e])return console.warn(`Cannot notify event '${e}' because it does not exist`),!1;WORLD.getService("AgentBehaviour"),Object.keys(this.events[e]).forEach(o=>{this.world.getService(o)[`on${e}`](t)})}}class Service{constructor(){this.world=new World}execute(){return!1}init(){return!1}}class ServiceManager{#f;constructor(e){this.world=e,this.#f={}}registerService(e,t){return"string"!=typeof e||""==e?(throw Error(`Cannot register service with a name defined as: ${typeName}; the name must be a non-empty string`),!1):this.#f[e]?(throw Error(`Service named '${e}' already registered`),!1):t&&null!=t?(t.world=this.world,this.#f[e]=t,this.#f[e].init(),!0):(throw Error(`Cannot register invalid or null service '${e}'`),!1)}getServices(){return this.#f}getService(e){return this.#f[e]?this.#f[e]:(throw Error(`Cannot get unregistered service '${e}'`),!1)}}class World{#g;#h;#i;#j;constructor(){this.#g=new AgentPool(this),this.#h=new CollectionManager(this),this.#j=new EventManager(this),this.#i=new ServiceManager(this),this.frame=0,this.routine=()=>{},this.pause=!1}registerService(e,t){return this.#i.registerService(e,t)}getServices(){return this.#i.getServices()}getService(e){return this.#i.getService(e)}registerCollection(e){return this.#h.registerCollection(e)}getCollection(e){return this.#h.getCollection(e)}addToCollection(e,t){return this.#h.addToCollection(e,t)}removeFromCollection(e,t){return this.#h.cacheToBeRemoved(e,t)}registerAgentType(e,t){return this.#g.registerType(e,t)}createAgent(e,t){let o=this.#g.createAgent(e,t);return this.#g.getCollectionsOfType(e).forEach(e=>{this.addToCollection(e,o)}),o}removeAgent(e){this.#g.storeToBeRemoved(e)}registerEvent(e){this.#j.registerEvent(e)}registerServiceToEvent(e,t){this.#j.registerServiceToEvent(e,t)}notifyEvent(e,t){this.#j.notifyToServices(e,t)}execute(){if(!this.pause){requestAnimationFrame(()=>{this.execute()}),this.#g.removeAgents(),this.#h.removeAgentsFromCollections();var e=this.getServices();Object.keys(e).forEach(t=>{e[t].execute()}),this.pause||(this.frame++,this.routine(this))}}pauseExecution(){this.pause=!0}}
